{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\PERSONAL_FINANCIAL_TRACKER\\\\FRONTEND\\\\src\\\\Components\\\\Transactions\\\\TransactionList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TransactionForm from './TransactionForm';\nimport TransactionItem from './TransactionItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionList = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n\n  // Get token from localStorage\n  const getToken = () => {\n    return localStorage.getItem('token');\n  };\n\n  // Fetch transactions from backend\n  const fetchTransactions = async () => {\n    try {\n      const token = getToken();\n      const response = await fetch('http://localhost:5000/api/transaction', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('DEBUG - Fetch response status:', response.status);\n      if (response.ok) {\n        const result = await response.json();\n        console.log('DEBUG - Full backend response:', result);\n\n        //  Extract transactions from the nested response\n        const transactionsArray = result.data.transactions || [];\n        console.log('DEBUG - Transactions array:', transactionsArray);\n        setTransactions(transactionsArray);\n      } else {\n        console.error('Failed to fetch transactions, status:', response.status);\n        setTransactions([]);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setTransactions([]);\n    }\n  };\n\n  // Add transaction to backend\n  const addTransaction = async transactionData => {\n    try {\n      const token = getToken();\n      if (!token) {\n        console.error('No token found - user not authenticated');\n        alert('Please log in first');\n        return;\n      }\n\n      //  Include goalId in the backend data\n      const backendData = {\n        type: transactionData.type,\n        category: transactionData.category,\n        amount: Number(transactionData.amount),\n        date: transactionData.date,\n        description: transactionData.category,\n        goalId: transactionData.goalId\n      };\n      console.log('[DEBUG] Sending transaction to backend with goalId:', transactionData.goalId, 'Full data:', backendData);\n      const response = await fetch('http://localhost:5000/api/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(backendData)\n      });\n      console.log('DEBUG - POST response status:', response.status);\n      if (response.ok) {\n        const result = await response.json();\n        console.log('DEBUG - Full backend response:', result);\n\n        // Extract transaction from the nested response\n        const newTransaction = result.data.transaction;\n        console.log('Transaction saved successfully:', newTransaction);\n        console.log('Transaction goalId:', newTransaction.goalId);\n        setTransactions(prev => [...prev, newTransaction]);\n        alert('Transaction saved successfully!');\n      } else {\n        const errorText = await response.text();\n        console.error('Backend error response:', errorText);\n        let errorMessage = 'Failed to save transaction';\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.message || errorMessage;\n        } catch (e) {\n          errorMessage = errorText || errorMessage;\n        }\n        console.error('Failed to add transaction:', errorMessage);\n        alert('Error: ' + errorMessage);\n      }\n    } catch (error) {\n      console.error('Network error adding transaction:', error);\n      alert('Network error: ' + error.message);\n    }\n  };\n\n  // Delete transaction from backend\n  const deleteTransaction = async id => {\n    try {\n      const token = getToken();\n      const response = await fetch(`http://localhost:5000/api/transaction/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        setTransactions(prev => prev.filter(tx => tx._id !== id));\n        console.log('Transaction deleted successfully');\n      } else {\n        console.error('Failed to delete transaction');\n      }\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n    }\n  };\n\n  // Fetch transactions on component mount\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-2xl mx-auto p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold text-gray-800\",\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionForm, {\n      onSubmit: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3\",\n      children: !transactions || transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center py-8\",\n        children: \"No transactions yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(TransactionItem, {\n        transaction: tx,\n        onDelete: deleteTransaction\n      }, tx._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionList, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n_c = TransactionList;\nexport default TransactionList;\nvar _c;\n$RefreshReg$(_c, \"TransactionList\");","map":{"version":3,"names":["React","useState","useEffect","TransactionForm","TransactionItem","jsxDEV","_jsxDEV","TransactionList","_s","transactions","setTransactions","getToken","localStorage","getItem","fetchTransactions","token","response","fetch","headers","console","log","status","ok","result","json","transactionsArray","data","error","addTransaction","transactionData","alert","backendData","type","category","amount","Number","date","description","goalId","method","body","JSON","stringify","newTransaction","transaction","prev","errorText","text","errorMessage","errorData","parse","message","e","deleteTransaction","id","filter","tx","_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","length","map","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/Desktop/PERSONAL_FINANCIAL_TRACKER/FRONTEND/src/Components/Transactions/TransactionList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport TransactionForm from './TransactionForm';\r\nimport TransactionItem from './TransactionItem';\r\n\r\nconst TransactionList = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  // Get token from localStorage\r\n  const getToken = () => {\r\n    return localStorage.getItem('token');\r\n  };\r\n\r\n  // Fetch transactions from backend\r\n  const fetchTransactions = async () => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch('http://localhost:5000/api/transaction', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      console.log('DEBUG - Fetch response status:', response.status);\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('DEBUG - Full backend response:', result);\r\n        \r\n        //  Extract transactions from the nested response\r\n        const transactionsArray = result.data.transactions || [];\r\n        console.log('DEBUG - Transactions array:', transactionsArray);\r\n        \r\n        setTransactions(transactionsArray);\r\n      } else {\r\n        console.error('Failed to fetch transactions, status:', response.status);\r\n        setTransactions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error);\r\n      setTransactions([]);\r\n    }\r\n  };\r\n\r\n  // Add transaction to backend\r\n  const addTransaction = async (transactionData) => {\r\n    try {\r\n      const token = getToken();\r\n      \r\n      if (!token) {\r\n        console.error('No token found - user not authenticated');\r\n        alert('Please log in first');\r\n        return;\r\n      }\r\n\r\n      //  Include goalId in the backend data\r\n      const backendData = {\r\n        type: transactionData.type,\r\n        category: transactionData.category,\r\n        amount: Number(transactionData.amount),\r\n        date: transactionData.date,\r\n        description: transactionData.category,\r\n        goalId: transactionData.goalId \r\n      };\r\n\r\n      console.log('[DEBUG] Sending transaction to backend with goalId:', transactionData.goalId, 'Full data:', backendData);\r\n\r\n      const response = await fetch('http://localhost:5000/api/transaction', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(backendData),\r\n      });\r\n\r\n      console.log('DEBUG - POST response status:', response.status);\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('DEBUG - Full backend response:', result);\r\n        \r\n        // Extract transaction from the nested response\r\n        const newTransaction = result.data.transaction;\r\n        console.log('Transaction saved successfully:', newTransaction);\r\n        console.log('Transaction goalId:', newTransaction.goalId); \r\n        \r\n        setTransactions(prev => [...prev, newTransaction]);\r\n        alert('Transaction saved successfully!');\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error('Backend error response:', errorText);\r\n        \r\n        let errorMessage = 'Failed to save transaction';\r\n        try {\r\n          const errorData = JSON.parse(errorText);\r\n          errorMessage = errorData.message || errorMessage;\r\n        } catch (e) {\r\n          errorMessage = errorText || errorMessage;\r\n        }\r\n        \r\n        console.error('Failed to add transaction:', errorMessage);\r\n        alert('Error: ' + errorMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error adding transaction:', error);\r\n      alert('Network error: ' + error.message);\r\n    }\r\n  };\r\n\r\n  // Delete transaction from backend\r\n  const deleteTransaction = async (id) => {\r\n    try {\r\n      const token = getToken();\r\n      \r\n      const response = await fetch(`http://localhost:5000/api/transaction/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        setTransactions(prev => prev.filter(tx => tx._id !== id));\r\n        console.log('Transaction deleted successfully');\r\n      } else {\r\n        console.error('Failed to delete transaction');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting transaction:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch transactions on component mount\r\n  useEffect(() => {\r\n    fetchTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"max-w-2xl mx-auto p-6 space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-800\">Transactions</h1>\r\n      \r\n      <TransactionForm onSubmit={addTransaction} />\r\n\r\n      <div className=\"space-y-3\">\r\n        {!transactions || transactions.length === 0 ? (\r\n          <p className=\"text-gray-500 text-center py-8\">No transactions yet</p>\r\n        ) : (\r\n          transactions.map((tx) => (\r\n            <TransactionItem\r\n              key={tx._id}\r\n              transaction={tx}\r\n              onDelete={deleteTransaction}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}